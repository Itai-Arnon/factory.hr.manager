
 

	/

	}

	/*Select construction*/
	async function createDropDownTable(emp_data) {
		clearSelect()
		console.log({ infosh: emp_data })
		if (emp_data == [] || emp_data.length === 0)//no dropdown will be created in this case
			message(8);
		else {
			//Text above drop down table
			select_container_text.innerHTML = `<i>Register Employees To This Department by picking their name in the DropDown<i>`
			//select container for all the dropdown defined as globla

			const select_emp = document.createElement("select-employees")
			//event listener basis
			
			//static part of dropdown
			const option = document.createElement("option")
			option.innerHTML = ``
			option.setAttribute("selected", "selected")
			option.setAttribute("value", "default")
			select.appendChild(option)

			//creates the dynamic part of the drop down
			emp_data.forEach(async function (e, idx) {
				const option = document.createElement("option")
				option.innerHTML = `<h3> ${idx + 1}  ${e.firstname} ${e.lastname}</h3>`
				option.setAttribute("value", idx) //value is the employee's name
				select.appendChild(option)
			})
			//final appending of the entire dropdown
			select_container.appendChild(select)
		}
	}
	/* creates a registered to a dept tables */
else {
			//once employee data exists a dynamic table is created

			//to avoid confusion or lack of employment
			//employees removed will be registered to the default department i.e deparmemnt[0]
			table_container_text.innerHTML = `<h3>Employees Registered To ${set_dept_name}
		Pick an Employee to remove him from here.<br/></h3><br/>`


	}


	
	}


	



	async function updateDept() {

		let result
		if (set_dept_id !== null) {
			const url_update_departments = `http://localhost:3000/departments/$set_dept_id}`
			const name = document.getElementById("dept-name").value;
			const managerId = manager_select.options[manager_select.selectedIndex].value;
			if (!name || validate(managerId)) message(9)
			else {
				console.log({ update_info: "inside_update" })
				result = await apiAction.put(url_update_departments, {
					name,
					managerId
				})

				console.log({ update_result: result })
				message(10)
				clearTables()
				reload()
				init()

			}
		} else message(7) // error
	}

	


	async function deleteDept(ev) {//funcId = 3
		console.log(ev)
		let result
		ev.preventDefault()
		const userConfirmed = confirm(
			"Are you sure you want to delete this department and all its employees?")

		const delete_id = document.getElementById("delete-id").value
		const delete_name = document.getElementById("delete-name").value
		if (delete_id !== null && userConfirmed) {
			await deleteEmployeesFromDept(delete_id)
			const url_delete_departments = `${url_departments}/${delete_id}`;
			result = await apiAction.delete(url_delete_departments)
			console.log({ delete_func__response: result });
			message(11)
			clearTables()
			reload()
			console.log({ msg: result })//this goes to the message 
		}

		else message(12) // error and cancelled
	}


	async function deleteEmployeesFromDept(delete_id) {
		let result
		const deletion_list = employees.filter(emp => emp.deptId === delete_id)
		if (!deletion_list || deletion_list.length === 0)
			message(8)
		else {
			console.log(deletion_list);
			deletion_list.forEach(async (emp) => {
				let url_delete_employees = `${url_employees}/${emp.firstname}`
				result = await apiAction.delete(url_delete_employees)
				console.log({ deletion_empl: "inside" });
				console.log({ info_res: result });

			})
			message(11)
			reload()
			init()
		}
	}




	
